{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# O projeto\n",
    "![Imagem do sistema](docs/system_proposal.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# feito por arthur lorencini\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definindo os os caminhos\n",
    "raw_dataset_path = Path(\"data/raw/\")\n",
    "wind_dataset_path = raw_dataset_path / 'wind/VentoCurvaPotencia.txt'\n",
    "consuption_dataset_path = raw_dataset_path / 'consumption' / 'Brava_consumo.xlsx'\n",
    "cases_dataset_path = raw_dataset_path / 'cases' / 'cases.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   velocity     2     3     4\n",
      "0       6.5  39.5  44.4  41.8\n",
      "1       5.6  24.4   0.0  26.5\n",
      "2       5.3  18.5   0.0  21.2\n",
      "3       2.4   0.0   0.0   0.0\n",
      "4       3.1   0.0   0.0   0.0\n",
      "O dataset deve conter 4 colunas e 8760 linhas\n",
      "(8760, 4)\n"
     ]
    }
   ],
   "source": [
    "# lendo o arquivo de texto que contém a quantidade de vento\n",
    "df_wind = pd.read_csv(wind_dataset_path,sep='\\t',header=None)\n",
    "df_wind.columns = ['velocity','2','3','4']\n",
    "# O que os números significam:\n",
    "# Os números são para indicar \n",
    "# 2:ntk150, 3:ntk300, 4:acsa225\n",
    "print(df_wind.head())\n",
    "print(\"O dataset deve conter 4 colunas e 8760 linhas\")\n",
    "print(df_wind.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "      <th>2018</th>\n",
       "      <th>2019</th>\n",
       "      <th>...</th>\n",
       "      <th>2028</th>\n",
       "      <th>2029</th>\n",
       "      <th>2030</th>\n",
       "      <th>2031</th>\n",
       "      <th>2032</th>\n",
       "      <th>2033</th>\n",
       "      <th>2034</th>\n",
       "      <th>2035</th>\n",
       "      <th>2036</th>\n",
       "      <th>2037</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>252.0</td>\n",
       "      <td>259.56</td>\n",
       "      <td>267.3468</td>\n",
       "      <td>275.367204</td>\n",
       "      <td>283.628220</td>\n",
       "      <td>292.137067</td>\n",
       "      <td>277.959276</td>\n",
       "      <td>286.298054</td>\n",
       "      <td>294.886996</td>\n",
       "      <td>303.733606</td>\n",
       "      <td>...</td>\n",
       "      <td>396.303464</td>\n",
       "      <td>408.192568</td>\n",
       "      <td>420.438345</td>\n",
       "      <td>433.051495</td>\n",
       "      <td>446.043040</td>\n",
       "      <td>459.424331</td>\n",
       "      <td>473.207061</td>\n",
       "      <td>487.403273</td>\n",
       "      <td>502.025371</td>\n",
       "      <td>517.086132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>238.0</td>\n",
       "      <td>245.14</td>\n",
       "      <td>252.4942</td>\n",
       "      <td>260.069026</td>\n",
       "      <td>267.871097</td>\n",
       "      <td>275.907230</td>\n",
       "      <td>262.517094</td>\n",
       "      <td>270.392607</td>\n",
       "      <td>278.504385</td>\n",
       "      <td>286.859517</td>\n",
       "      <td>...</td>\n",
       "      <td>374.286605</td>\n",
       "      <td>385.515203</td>\n",
       "      <td>397.080659</td>\n",
       "      <td>408.993079</td>\n",
       "      <td>421.262871</td>\n",
       "      <td>433.900757</td>\n",
       "      <td>446.917780</td>\n",
       "      <td>460.325313</td>\n",
       "      <td>474.135073</td>\n",
       "      <td>488.359125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>228.0</td>\n",
       "      <td>234.84</td>\n",
       "      <td>241.8852</td>\n",
       "      <td>249.141756</td>\n",
       "      <td>256.616009</td>\n",
       "      <td>264.314489</td>\n",
       "      <td>251.486964</td>\n",
       "      <td>259.031573</td>\n",
       "      <td>266.802520</td>\n",
       "      <td>274.806596</td>\n",
       "      <td>...</td>\n",
       "      <td>358.560277</td>\n",
       "      <td>369.317085</td>\n",
       "      <td>380.396598</td>\n",
       "      <td>391.808496</td>\n",
       "      <td>403.562750</td>\n",
       "      <td>415.669633</td>\n",
       "      <td>428.139722</td>\n",
       "      <td>440.983914</td>\n",
       "      <td>454.213431</td>\n",
       "      <td>467.839834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>225.0</td>\n",
       "      <td>231.75</td>\n",
       "      <td>238.7025</td>\n",
       "      <td>245.863575</td>\n",
       "      <td>253.239482</td>\n",
       "      <td>260.836667</td>\n",
       "      <td>248.177925</td>\n",
       "      <td>255.623263</td>\n",
       "      <td>263.291961</td>\n",
       "      <td>271.190719</td>\n",
       "      <td>...</td>\n",
       "      <td>353.842378</td>\n",
       "      <td>364.457650</td>\n",
       "      <td>375.391379</td>\n",
       "      <td>386.653121</td>\n",
       "      <td>398.252714</td>\n",
       "      <td>410.200296</td>\n",
       "      <td>422.506305</td>\n",
       "      <td>435.181494</td>\n",
       "      <td>448.236939</td>\n",
       "      <td>461.684047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>220.0</td>\n",
       "      <td>226.60</td>\n",
       "      <td>233.3980</td>\n",
       "      <td>240.399940</td>\n",
       "      <td>247.611938</td>\n",
       "      <td>255.040296</td>\n",
       "      <td>242.662860</td>\n",
       "      <td>249.942746</td>\n",
       "      <td>257.441028</td>\n",
       "      <td>265.164259</td>\n",
       "      <td>...</td>\n",
       "      <td>345.979214</td>\n",
       "      <td>356.358591</td>\n",
       "      <td>367.049349</td>\n",
       "      <td>378.060829</td>\n",
       "      <td>389.402654</td>\n",
       "      <td>401.084734</td>\n",
       "      <td>413.117276</td>\n",
       "      <td>425.510794</td>\n",
       "      <td>438.276118</td>\n",
       "      <td>451.424401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    2010    2011      2012        2013        2014        2015        2016  \\\n",
       "0  252.0  259.56  267.3468  275.367204  283.628220  292.137067  277.959276   \n",
       "1  238.0  245.14  252.4942  260.069026  267.871097  275.907230  262.517094   \n",
       "2  228.0  234.84  241.8852  249.141756  256.616009  264.314489  251.486964   \n",
       "3  225.0  231.75  238.7025  245.863575  253.239482  260.836667  248.177925   \n",
       "4  220.0  226.60  233.3980  240.399940  247.611938  255.040296  242.662860   \n",
       "\n",
       "         2017        2018        2019  ...        2028        2029  \\\n",
       "0  286.298054  294.886996  303.733606  ...  396.303464  408.192568   \n",
       "1  270.392607  278.504385  286.859517  ...  374.286605  385.515203   \n",
       "2  259.031573  266.802520  274.806596  ...  358.560277  369.317085   \n",
       "3  255.623263  263.291961  271.190719  ...  353.842378  364.457650   \n",
       "4  249.942746  257.441028  265.164259  ...  345.979214  356.358591   \n",
       "\n",
       "         2030        2031        2032        2033        2034        2035  \\\n",
       "0  420.438345  433.051495  446.043040  459.424331  473.207061  487.403273   \n",
       "1  397.080659  408.993079  421.262871  433.900757  446.917780  460.325313   \n",
       "2  380.396598  391.808496  403.562750  415.669633  428.139722  440.983914   \n",
       "3  375.391379  386.653121  398.252714  410.200296  422.506305  435.181494   \n",
       "4  367.049349  378.060829  389.402654  401.084734  413.117276  425.510794   \n",
       "\n",
       "         2036        2037  \n",
       "0  502.025371  517.086132  \n",
       "1  474.135073  488.359125  \n",
       "2  454.213431  467.839834  \n",
       "3  448.236939  461.684047  \n",
       "4  438.276118  451.424401  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pegando os dados de consumo/demanda da ilha\n",
    "# O dataset possui umas linhas que não vão agregar em nada\n",
    "# Vamos apenas pegar as linhas\n",
    "df_cons = pd.read_excel(consuption_dataset_path,sheet_name='Carga2010-2037',skiprows=1,nrows=8760)\n",
    "if df_cons.shape[0] != 8760:\n",
    "    raise ValueError(\"O dataset de consumo está com o tamanho errado\")\n",
    "df_cons.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cada ano mostra o consumo da ilha de Brava, se eu não me engano. Cada ano possui 8760 horas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definindo constantes\n",
    "# Eficiência média da bomba\n",
    "avg_pump_eff = 0.86 # nb\n",
    "# Eficiência média da turbina hidráulica (eu acho)\n",
    "avg_hydraulic_turbine_efficiency = 0.86 # nt\n",
    "# Eficiência média da conversão da potência eólica\n",
    "avg_conversion_eff = 0.97 # nw\n",
    "\n",
    "# O mínimo de potência de entrega?\n",
    "minimum_power_output_from_diesel_generator = 256*0.5 # PDmin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definindo a matrix de resultados\n",
    "df_result = pd.DataFrame({})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aero_power_kW</th>\n",
       "      <th>number_of_aero</th>\n",
       "      <th>aero_id</th>\n",
       "      <th>reservatory_volume_m3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>225</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   aero_power_kW  number_of_aero  aero_id  reservatory_volume_m3\n",
       "0            150               2        2                   1500\n",
       "1            300               1        3                   1500\n",
       "2            150               3        2                   2250\n",
       "3            225               2        4                   2250\n",
       "4            225               3        4                   3400"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Definindo os casos (cenários simulados)\n",
    "# Esse csv eu criei para usar como banco de dados\n",
    "df_cases = pd.read_csv(cases_dataset_path)\n",
    "df_cases.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "aero_id se refere o id lá do dataset do vento."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Calculo reservatório](docs/reservoir.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def resevartory_volume_to_energy(volume_m3:float):\n",
    "    \"\"\"recebe em m3 e devolve em kWh\n",
    "     o quanto de energia um reservatório pode armazenar\n",
    "     \"\"\"\n",
    "    return volume_m3/3600*9.8*110"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aero_power_kW</th>\n",
       "      <th>number_of_aero</th>\n",
       "      <th>aero_id</th>\n",
       "      <th>reservatory_volume_m3</th>\n",
       "      <th>reservatory_stored_energy_kWh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1500</td>\n",
       "      <td>449.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1500</td>\n",
       "      <td>449.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2250</td>\n",
       "      <td>673.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>225</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2250</td>\n",
       "      <td>673.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3400</td>\n",
       "      <td>1018.111111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   aero_power_kW  number_of_aero  aero_id  reservatory_volume_m3  \\\n",
       "0            150               2        2                   1500   \n",
       "1            300               1        3                   1500   \n",
       "2            150               3        2                   2250   \n",
       "3            225               2        4                   2250   \n",
       "4            225               3        4                   3400   \n",
       "\n",
       "   reservatory_stored_energy_kWh  \n",
       "0                     449.166667  \n",
       "1                     449.166667  \n",
       "2                     673.750000  \n",
       "3                     673.750000  \n",
       "4                    1018.111111  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Aqui vamos calcular o quanto que cada combinação pode nos dar de energia inicial\n",
    "df_cases['reservatory_stored_energy_kWh'] = resevartory_volume_to_energy(df_cases.reservatory_volume_m3)\n",
    "df_cases.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aero_power_kW</th>\n",
       "      <th>number_of_aero</th>\n",
       "      <th>aero_id</th>\n",
       "      <th>reservatory_volume_m3</th>\n",
       "      <th>reservatory_stored_energy_kWh</th>\n",
       "      <th>max_power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1500</td>\n",
       "      <td>449.166667</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1500</td>\n",
       "      <td>449.166667</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2250</td>\n",
       "      <td>673.750000</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>225</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2250</td>\n",
       "      <td>673.750000</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>225</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3400</td>\n",
       "      <td>1018.111111</td>\n",
       "      <td>675</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   aero_power_kW  number_of_aero  aero_id  reservatory_volume_m3  \\\n",
       "0            150               2        2                   1500   \n",
       "1            300               1        3                   1500   \n",
       "2            150               3        2                   2250   \n",
       "3            225               2        4                   2250   \n",
       "4            225               3        4                   3400   \n",
       "\n",
       "   reservatory_stored_energy_kWh  max_power  \n",
       "0                     449.166667        300  \n",
       "1                     449.166667        300  \n",
       "2                     673.750000        450  \n",
       "3                     673.750000        450  \n",
       "4                    1018.111111        675  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cases['max_power'] = df_cases.aero_power_kW*df_cases.number_of_aero\n",
    "df_cases.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Algo](docs/algo.png)\n",
    "![energy](docs/energy_wind.png)\n",
    "![also energy](docs/energy_1.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Legenda\n",
    "Ewf is the total hourly produced energy of the wind farm;\n",
    "P_w is the hourly power of a single wind turbine; \n",
    "n_w is the wind farm overall efficiency (97%); \n",
    "and N wind turbine units;\n",
    "\n",
    "Ewf = n_w * N * P_w * 1 hora (kkkkk)\n",
    "Ewf = Energia injetada na rede + energia entregue nas bombas, energia desperdiçada\n",
    "Ewig = energia do vento na rede (Energy WInd Generated)\n",
    "Ep = Energy Pump\n",
    "E dis = Energy Dissipated\n",
    "\n",
    "Essa energia desperdiçada acontece caso o reservatório esteja cheio.\n",
    "\n",
    "Ed = Energia média consumida em uma hora (energia Demandada)\n",
    "Ed = Energia do vento + energia do diesel + energia das turbinas hidráulicas\n",
    "Ed = Ewig + Edg + Eh\n",
    "\n",
    "Erj = Energia Inicial no Reservatório = current_stored_energy\n",
    "Pwt = Power Wind Turbine - Potência do parque eólico\n",
    "Pd = Power Demand (da rede da ilha)\n",
    "Pt = \n",
    "Pb = \n",
    "Pge = \n",
    "Pwr = energia que o parque eólico injetou na rede (Ewig) \n",
    "Ptmax = potêcnia máxima da turbina hidráulica\n",
    "PDmin = O grupo eletrogéneo não pode funcionar abaixo de 50% da carga\n",
    "O menor grupo tem a potência de 250kW\n",
    "PDmin = 256*0.5\n",
    "\n",
    "\n",
    "O algoritmo tem como entrada os seguintes valores:\n",
    "A demanda de energia - Ed\n",
    "Velocidade do vento - Ws (?)\n",
    "A curva de potência do gerador eólico\n",
    "Capacidade máxima de armazenamento do reservatório E_r_max (energy reservoir max)\n",
    "\n",
    "Temos que analisar até 5 condicionais\n",
    "1º → A Energia do parque éolico é menor que 35% da demanda?\n",
    "Se sim, A energia gerada do vento vai ser a mesma da demanda Ewf = Ewig (demanda tem que atender oferta)\n",
    "2º Se a energia do vento que sobrou depois de injetar na rede for \n",
    "menor quanto o espaço que falta de preencher do reservatório\n",
    "(Ex: Temos 10kWh do vento e ainda podemos colocar mais 20kWh no reservatório (que corresponde a um volume x))\n",
    "Então, vc manda esse restante de energia pras bombas (Ep - Energy Pump)\n",
    "Aí a energia do reservatório vai aumentar com o tempo\n",
    "Se for maior (temos sobrando 30kWh do vento e falta 20kWh do reservatório),\n",
    "você enche o reservatório até o talo fi kkkkkkkkkkk\n",
    "O resto você dissipa nas resistências do universo\n",
    "\n",
    "3º Se a diferença entre a demanda e o quanto injetou de vento for \n",
    "menor que que a energia do reservatório\n",
    "Então vc roda o 4º\n",
    "Se for maior\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Note: Potência e Energia assumem o mesmo valor numérico\n",
    "pois estamos tratando no período médio de uma hora\n",
    "\n",
    "E = P * h, se Geramos 13kW (médios) em 1 h, então geramos 13kWh.\n",
    "\n",
    "\"\"\"\n",
    "injected_power_values = []\n",
    "for idx, case_row in df_cases.iterrows():\n",
    "    aero_power = case_row['aero_power_kW']\n",
    "    number_of_aero = case_row['number_of_aero']\n",
    "    aero_id = str(int(case_row['aero_id']))\n",
    "    maximum_reservoir_energy = case_row['reservatory_stored_energy_kWh']\n",
    "    current_reservoir_energy = maximum_reservoir_energy/2\n",
    "\n",
    "    # eff = out/in → eff = elect/wind → wind = elect*eff\n",
    "    # Criando a coluna de potência total do parque eólico\n",
    "    combined_wind_turbine_power = number_of_aero * avg_conversion_eff * df_wind[aero_id] \n",
    "    # NOTE\n",
    "    # Por algum motivo, esse é o valor da potência da turbina hidraulica.\n",
    "    # Não entendi ainda.\n",
    "    max_hydraulic_turbine_power = combined_wind_turbine_power.mean()\n",
    "\n",
    "    for year in df_cons.columns:\n",
    "        # Vamos checar para cada hora de cada ano\n",
    "        for hour_idx, consumption in enumerate(df_cons[year]):\n",
    "            # consumption é o consumo médio kWH em uma hora do ano.\n",
    "            # Se a energia gerada pelo parque eólico for maior que a demanda\n",
    "            # Vamos injetar no máximo 35% da demanda na rede sempre.\n",
    "            # E injetar no mínimo o máximo que o parque eólico produzir\n",
    "            if combined_wind_turbine_power[hour_idx] > consumption*0.35:\n",
    "                wind_injected_energy = consumption*0.35 # TODO: Armazenar em uma matriz\n",
    "                injected_power_values.append(wind_injected_energy)\n",
    "                available_wind_energy_to_pump = (combined_wind_turbine_power[hour_idx] - wind_injected_energy)*avg_pump_eff\n",
    "                available_reservoir_energy_capacity = maximum_reservoir_energy - current_reservoir_energy\n",
    "                # Verifica se o reservatório tem capacidade para \n",
    "                if available_wind_energy_to_pump < available_reservoir_energy_capacity:\n",
    "                    # Se sim, ele vai injetar o que sobrou nas turbinas\n",
    "                    # E o reservatório vai encher um pouco, não vai ser até o talo.    \n",
    "                    # NOTE: Talvez esteja faltando a eficiência aqui, não sei\n",
    "                    pump_power = combined_wind_turbine_power[hour_idx] - wind_injected_energy\n",
    "                    current_reservoir_energy += available_wind_energy_to_pump\n",
    "                else:\n",
    "                    # O reservatório vai encher até o talo e dissipar o resto\n",
    "                    # cuidado com as unidades\n",
    "                    pump_power = available_reservoir_energy_capacity/avg_pump_eff\n",
    "                    current_reservoir_energy = maximum_reservoir_energy\n",
    "                    rejected_energy = combined_wind_turbine_power[hour_idx] - wind_injected_energy\n",
    "                    rejected_energy -= (maximum_reservoir_energy - current_reservoir_energy)/avg_pump_eff\n",
    "            else:\n",
    "                # Se a energia do parque eólico for menor que 35% da demanda\n",
    "                # ele vai injetar o que tem mesmo e abraços.\n",
    "                wind_injected_energy = combined_wind_turbine_power[hour_idx]\n",
    "                reservoir_energy = current_reservoir_energy # eu acho que ele salva o valor final\n",
    "\n",
    "            # %--------------- energia de compensacao: hidraulica ou diesel --------\n",
    "            #\n",
    "            #\n",
    "            # Se a energia do reservatório for maior que a demanda abatida (demanda - vento na rede)\n",
    "            # Terceiro condicional - averiguando energia\n",
    "            # if (Pd(j,i)-Pwr(j,i)) <= Erj*nt %%%%verifica se reservatorio tem energia hidrica suficiente para complementar a energia eolica\n",
    "            remaining_energy_needs = consumption - wind_injected_energy\n",
    "            if remaining_energy_needs <= current_reservoir_energy*avg_hydraulic_turbine_efficiency:\n",
    "                # Vamos averiguar as potências médias\n",
    "                # if (Pd(j,i)-Pwr(j,i)) <= Ptmax  % e se a hidroturbina  tem potencia suficiente.\n",
    "                can_hydraulic_turbine_meet_demand = remaining_energy_needs <= max_hydraulic_turbine_power\n",
    "\n",
    "                # 256 é 128 x 2\n",
    "                # ou seja, 128kW é 50% da potência nominal do gerador a diesel\n",
    "                # 128kW é o número do fluxograma\n",
    "                is_remaining_demand_within_hydraulic_and_diesel_capacity = remaining_energy_needs <= max_hydraulic_turbine_power + minimum_power_output_from_diesel_generator\n",
    "                # Ou seja, se a potência\n",
    "                if can_hydraulic_turbine_meet_demand:\n",
    "                    # Se atende, a potência da turbina hidráulica é a mesma da demanda restante\n",
    "                    # O gerador a diesel fica desligado\n",
    "                    # A energia armazenada no reservatório cai\n",
    "                    hidraulic_turbine_power = remaining_energy_needs\n",
    "                    diesel_generation_power = 0\n",
    "                elif is_remaining_demand_within_hydraulic_and_diesel_capacity:\n",
    "                    # Ou seja, aqui já a turbina hidráulica não segura a buxa sozinha.\n",
    "                    # Se a demanda restante for menor que a turbina hidraulica + o valor mínimo\n",
    "                    # de entrega do gerador\n",
    "                    # Então a gente liga o gerador a diesel no mínimo (128 kW)\n",
    "                    # A potencia da turbina vai ficar pra abastecer o que restou\n",
    "                    # E a energia do reservatório cai\n",
    "                    diesel_generation_power = minimum_power_output_from_diesel_generator\n",
    "                    hidraulic_turbine_power = remaining_energy_needs - diesel_generation_power\n",
    "                else:\n",
    "                    # O elif do .m virou else aqui\n",
    "                    # Se a demanda restante for maior que a potencia minima + potência máxima da turbina hidraulica\n",
    "                    # Liga a turbina no talo\n",
    "                    # Liga o gerador pra abastecer o restante\n",
    "                    # e a energia no reservatório vai caindo\n",
    "                    hidraulic_turbine_power = max_hydraulic_turbine_power\n",
    "                    diesel_generation_power = remaining_energy_needs - hidraulic_turbine_power\n",
    "                # Essa condição é comum para os tres casos do .m\n",
    "                current_reservoir_energy -= hidraulic_turbine_power/avg_hydraulic_turbine_efficiency\n",
    "\n",
    "            # Se vai faltar água no reservatório pra antender a demanda faltante\n",
    "            # elseif (Pd(j,i)-Pwr(j,i)) > Erj*nt %%%%%verifica se reservatorio tem energia hidrica suficiente para complementar a energia eolica. A turbina tb nao pode atender tudo\n",
    "            else:\n",
    "                # o elseif do verifica lá virou else aqui por razões lógicas.\n",
    "                # Se a energia armazenada está entre a potência máxima da turbina + entrega minima e \n",
    "                # a potência máxima da turbin\n",
    "                # if Erj*nt > Ptmax  && Erj*nt < ( Ptmax + PDmin) \n",
    "                if (max_hydraulic_turbine_power + minimum_power_output_from_diesel_generator > current_reservoir_energy*avg_hydraulic_turbine_efficiency and\n",
    "                    current_reservoir_energy*avg_hydraulic_turbine_efficiency > max_hydraulic_turbine_power):\n",
    "                    is_hydraulic_power_sufficient = max_hydraulic_turbine_power >= minimum_power_output_from_diesel_generator and max_hydraulic_turbine_power >= remaining_energy_needs\n",
    "                    # if Ptmax >= PDmin && (Pd(j,i)-Pwr(j,i))<= Ptmax % garante que Turbina fica abaixo da sua potencia\n",
    "                    if is_hydraulic_power_sufficient:\n",
    "                        diesel_generation_power = consumption\n",
    "                        hidraulic_turbine_power = remaining_energy_needs - minimum_power_output_from_diesel_generator\n",
    "                        current_reservoir_energy -= hidraulic_turbine_power/avg_hydraulic_turbine_efficiency\n",
    "                    else:\n",
    "                        diesel_generation_power = remaining_energy_needs\n",
    "                elif (current_reservoir_energy*avg_hydraulic_turbine_efficiency > max_hydraulic_turbine_power + minimum_power_output_from_diesel_generator):\n",
    "                    hidraulic_turbine_power = max_hydraulic_turbine_power\n",
    "                    diesel_generation_power = remaining_energy_needs - hidraulic_turbine_power\n",
    "                    current_reservoir_energy -= hidraulic_turbine_power/avg_hydraulic_turbine_efficiency\n",
    "                else:\n",
    "                    diesel_generation_power = remaining_energy_needs"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
